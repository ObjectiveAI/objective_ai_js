// @generated by protobuf-ts 2.9.0 with parameter ts_nocheck,server_none,long_type_number
// @generated from protobuf file "objective_ai_proto/objective_ai.proto" (package "objective_ai", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ObjectiveAI } from "./objective_ai";
import type { QueryStreamingResponse } from "./objective_ai";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { QueryResponse } from "./objective_ai";
import type { QueryRequest } from "./objective_ai";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service objective_ai.ObjectiveAI
 */
export interface IObjectiveAIClient {
    /**
     * @generated from protobuf rpc: Query(objective_ai.QueryRequest) returns (objective_ai.QueryResponse);
     */
    query(input: QueryRequest, options?: RpcOptions): UnaryCall<QueryRequest, QueryResponse>;
    /**
     * @generated from protobuf rpc: QueryStreaming(objective_ai.QueryRequest) returns (stream objective_ai.QueryStreamingResponse);
     */
    queryStreaming(input: QueryRequest, options?: RpcOptions): ServerStreamingCall<QueryRequest, QueryStreamingResponse>;
}
/**
 * @generated from protobuf service objective_ai.ObjectiveAI
 */
export class ObjectiveAIClient implements IObjectiveAIClient, ServiceInfo {
    typeName = ObjectiveAI.typeName;
    methods = ObjectiveAI.methods;
    options = ObjectiveAI.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Query(objective_ai.QueryRequest) returns (objective_ai.QueryResponse);
     */
    query(input: QueryRequest, options?: RpcOptions): UnaryCall<QueryRequest, QueryResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryRequest, QueryResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: QueryStreaming(objective_ai.QueryRequest) returns (stream objective_ai.QueryStreamingResponse);
     */
    queryStreaming(input: QueryRequest, options?: RpcOptions): ServerStreamingCall<QueryRequest, QueryStreamingResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryRequest, QueryStreamingResponse>("serverStreaming", this._transport, method, opt, input);
    }
}
