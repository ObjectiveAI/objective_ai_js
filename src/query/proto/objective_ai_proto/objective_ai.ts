// @generated by protobuf-ts 2.9.0 with parameter ts_nocheck,server_none,long_type_number
// @generated from protobuf file "objective_ai_proto/objective_ai.proto" (package "objective_ai", syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Value } from "../google/protobuf/struct";
import { StringValue } from "../google/protobuf/wrappers";
import { UInt64Value } from "../google/protobuf/wrappers";
/**
 * @generated from protobuf message objective_ai.QueryRequest
 */
export interface QueryRequest {
    /**
     * @generated from protobuf field: repeated objective_ai.Message messages = 1;
     */
    messages: Message[];
    /**
     * @generated from protobuf field: string meta_model = 2;
     */
    metaModel: string;
    /**
     * @generated from protobuf field: objective_ai.JsonSchema response_format = 3;
     */
    responseFormat?: JsonSchema; // required
    /**
     * @generated from protobuf field: objective_ai.Stop stop = 4;
     */
    stop?: Stop; // optional
    /**
     * @generated from protobuf field: google.protobuf.UInt64Value max_tokens = 5;
     */
    maxTokens?: UInt64Value; // optional
    /**
     * @generated from protobuf field: repeated objective_ai.Tool tools = 6;
     */
    tools: Tool[]; // optional
}
/**
 * @generated from protobuf message objective_ai.QueryResponse
 */
export interface QueryResponse {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string; // request id
    /**
     * @generated from protobuf field: string meta_model = 2;
     */
    metaModel: string;
    /**
     * @generated from protobuf field: repeated objective_ai.QueryChoice choices = 3;
     */
    choices: QueryChoice[];
}
/**
 * @generated from protobuf message objective_ai.QueryStreamingResponse
 */
export interface QueryStreamingResponse {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string; // request id
    /**
     * @generated from protobuf field: string meta_model = 2;
     */
    metaModel: string;
    /**
     * @generated from protobuf oneof: kind
     */
    kind: {
        oneofKind: "choice";
        /**
         * @generated from protobuf field: objective_ai.QueryChoice choice = 3;
         */
        choice: QueryChoice; // choice
    } | {
        oneofKind: "vote";
        /**
         * @generated from protobuf field: objective_ai.QueryChoiceVote vote = 4;
         */
        vote: QueryChoiceVote; // vote
    } | {
        oneofKind: "choiceConfidence";
        /**
         * @generated from protobuf field: objective_ai.QueryStreamingChoiceConfidence choice_confidence = 5;
         */
        choiceConfidence: QueryStreamingChoiceConfidence; // choice confidence
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message objective_ai.QueryStreamingChoiceConfidence
 */
export interface QueryStreamingChoiceConfidence {
    /**
     * @generated from protobuf field: map<string, double> confidence = 1;
     */
    confidence: {
        [key: string]: number;
    }; // choice id to confidence
}
/**
 * @generated from protobuf message objective_ai.QueryChoice
 */
export interface QueryChoice {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string; // choice id
    /**
     * @generated from protobuf field: objective_ai.QueryMessage message = 2;
     */
    message?: QueryMessage; // required
    /**
     * @generated from protobuf field: repeated objective_ai.QueryChoiceVote votes = 3;
     */
    votes: QueryChoiceVote[];
    /**
     * @generated from protobuf field: double confidence = 4;
     */
    confidence: number;
}
/**
 * @generated from protobuf message objective_ai.QueryChoiceVote
 */
export interface QueryChoiceVote {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string; // choice id
    /**
     * @generated from protobuf field: string model = 2;
     */
    model: string;
    /**
     * @generated from protobuf field: double temperature = 3;
     */
    temperature: number;
    /**
     * @generated from protobuf field: double top_p = 4;
     */
    topP: number;
    /**
     * @generated from protobuf field: google.protobuf.StringValue provider = 5;
     */
    provider?: StringValue;
    /**
     * @generated from protobuf field: objective_ai.QueryChoiceVoteKind kind = 6;
     */
    kind: QueryChoiceVoteKind;
    /**
     * @generated from protobuf field: string reasoning = 7;
     */
    reasoning: string;
    /**
     * @generated from protobuf field: google.protobuf.StringValue finish_reason = 8;
     */
    finishReason?: StringValue;
    /**
     * @generated from protobuf field: objective_ai.Usage usage = 9;
     */
    usage?: Usage; // required
}
/**
 * @generated from protobuf message objective_ai.QueryMessage
 */
export interface QueryMessage {
    /**
     * @generated from protobuf field: objective_ai.Role role = 1;
     */
    role: Role;
    /**
     * @generated from protobuf field: google.protobuf.Value content = 2;
     */
    content?: Value; // required
}
/**
 * @generated from protobuf message objective_ai.Usage
 */
export interface Usage {
    /**
     * @generated from protobuf field: uint64 prompt_tokens = 1;
     */
    promptTokens: number;
    /**
     * @generated from protobuf field: uint64 completion_tokens = 2;
     */
    completionTokens: number;
}
/**
 * @generated from protobuf message objective_ai.Message
 */
export interface Message {
    /**
     * @generated from protobuf oneof: kind
     */
    kind: {
        oneofKind: "user";
        /**
         * @generated from protobuf field: objective_ai.UserMessage user = 1;
         */
        user: UserMessage;
    } | {
        oneofKind: "assistant";
        /**
         * @generated from protobuf field: objective_ai.AssistantMessage assistant = 2;
         */
        assistant: AssistantMessage;
    } | {
        oneofKind: "system";
        /**
         * @generated from protobuf field: objective_ai.SystemMessage system = 3;
         */
        system: SystemMessage;
    } | {
        oneofKind: "tool";
        /**
         * @generated from protobuf field: objective_ai.ToolMessage tool = 4;
         */
        tool: ToolMessage;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message objective_ai.AssistantMessage
 */
export interface AssistantMessage {
    /**
     * @generated from protobuf field: objective_ai.MessageContent content = 1;
     */
    content?: MessageContent; // required
    /**
     * @generated from protobuf field: repeated objective_ai.ToolCall tool_calls = 2;
     */
    toolCalls: ToolCall[];
}
/**
 * @generated from protobuf message objective_ai.ToolMessage
 */
export interface ToolMessage {
    /**
     * @generated from protobuf field: objective_ai.MessageContent content = 1;
     */
    content?: MessageContent; // required
    /**
     * @generated from protobuf field: string tool_call_id = 2;
     */
    toolCallId: string;
}
/**
 * @generated from protobuf message objective_ai.UserMessage
 */
export interface UserMessage {
    /**
     * @generated from protobuf field: objective_ai.MessageContent content = 1;
     */
    content?: MessageContent; // required
}
/**
 * @generated from protobuf message objective_ai.SystemMessage
 */
export interface SystemMessage {
    /**
     * @generated from protobuf field: objective_ai.MessageContent content = 1;
     */
    content?: MessageContent; // required
}
/**
 * @generated from protobuf message objective_ai.Stop
 */
export interface Stop {
    /**
     * @generated from protobuf oneof: kind
     */
    kind: {
        oneofKind: "text";
        /**
         * @generated from protobuf field: string text = 1;
         */
        text: string;
    } | {
        oneofKind: "texts";
        /**
         * @generated from protobuf field: objective_ai.RepeatedText texts = 2;
         */
        texts: RepeatedText;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message objective_ai.RepeatedText
 */
export interface RepeatedText {
    /**
     * @generated from protobuf field: repeated string texts = 1;
     */
    texts: string[]; // required
}
/**
 * @generated from protobuf message objective_ai.MessageContent
 */
export interface MessageContent {
    /**
     * @generated from protobuf oneof: kind
     */
    kind: {
        oneofKind: "text";
        /**
         * @generated from protobuf field: string text = 1;
         */
        text: string;
    } | {
        oneofKind: "parts";
        /**
         * @generated from protobuf field: objective_ai.ContentParts parts = 2;
         */
        parts: ContentParts;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message objective_ai.ToolCall
 */
export interface ToolCall {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf oneof: kind
     */
    kind: {
        oneofKind: "function";
        /**
         * @generated from protobuf field: objective_ai.FunctionToolCall function = 2;
         */
        function: FunctionToolCall;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message objective_ai.FunctionToolCall
 */
export interface FunctionToolCall {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: google.protobuf.Value arguments = 2;
     */
    arguments?: Value; // required
}
/**
 * @generated from protobuf message objective_ai.ContentParts
 */
export interface ContentParts {
    /**
     * @generated from protobuf field: repeated objective_ai.ContentPart parts = 1;
     */
    parts: ContentPart[];
}
/**
 * @generated from protobuf message objective_ai.ContentPart
 */
export interface ContentPart {
    /**
     * @generated from protobuf oneof: kind
     */
    kind: {
        oneofKind: "text";
        /**
         * @generated from protobuf field: string text = 1;
         */
        text: string; // Text Content Part
    } | {
        oneofKind: "imageUrl";
        /**
         * @generated from protobuf field: objective_ai.ImageUrl image_url = 2;
         */
        imageUrl: ImageUrl; // Image Content Part
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message objective_ai.ImageUrl
 */
export interface ImageUrl {
    /**
     * @generated from protobuf field: string url = 1;
     */
    url: string; // URL or base64 encoded image
    /**
     * @generated from protobuf field: google.protobuf.StringValue detail = 2;
     */
    detail?: StringValue; //  detail level of the image, defaults to 'auto'
}
/**
 * @generated from protobuf message objective_ai.Tool
 */
export interface Tool {
    /**
     * @generated from protobuf oneof: kind
     */
    kind: {
        oneofKind: "function";
        /**
         * @generated from protobuf field: objective_ai.FunctionTool function = 1;
         */
        function: FunctionTool;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message objective_ai.FunctionTool
 */
export interface FunctionTool {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: google.protobuf.StringValue description = 2;
     */
    description?: StringValue; // optional
    /**
     * @generated from protobuf field: google.protobuf.Value parameters = 3;
     */
    parameters?: Value; // required
}
/**
 * @generated from protobuf message objective_ai.JsonSchema
 */
export interface JsonSchema {
    /**
     * @generated from protobuf oneof: kind
     */
    kind: {
        oneofKind: "boolean";
        /**
         * @generated from protobuf field: objective_ai.BooleanJsonSchema boolean = 1;
         */
        boolean: BooleanJsonSchema;
    } | {
        oneofKind: "number";
        /**
         * @generated from protobuf field: objective_ai.NumberJsonSchema number = 2;
         */
        number: NumberJsonSchema;
    } | {
        oneofKind: "integer";
        /**
         * @generated from protobuf field: objective_ai.IntegerJsonSchema integer = 3;
         */
        integer: IntegerJsonSchema;
    } | {
        oneofKind: "string";
        /**
         * @generated from protobuf field: objective_ai.StringJsonSchema string = 4;
         */
        string: StringJsonSchema;
    } | {
        oneofKind: "array";
        /**
         * @generated from protobuf field: objective_ai.ArrayJsonSchema array = 5;
         */
        array: ArrayJsonSchema;
    } | {
        oneofKind: "object";
        /**
         * @generated from protobuf field: objective_ai.ObjectJsonSchema object = 6;
         */
        object: ObjectJsonSchema;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message objective_ai.BooleanJsonSchema
 */
export interface BooleanJsonSchema {
    /**
     * @generated from protobuf field: google.protobuf.StringValue description = 1;
     */
    description?: StringValue; // optional
}
/**
 * @generated from protobuf message objective_ai.NumberJsonSchema
 */
export interface NumberJsonSchema {
    /**
     * @generated from protobuf field: google.protobuf.StringValue description = 1;
     */
    description?: StringValue; // optional
}
/**
 * @generated from protobuf message objective_ai.IntegerJsonSchema
 */
export interface IntegerJsonSchema {
    /**
     * @generated from protobuf field: google.protobuf.StringValue description = 1;
     */
    description?: StringValue; // optional
}
/**
 * @generated from protobuf message objective_ai.StringJsonSchema
 */
export interface StringJsonSchema {
    /**
     * @generated from protobuf field: google.protobuf.StringValue description = 1;
     */
    description?: StringValue; // optional
    /**
     * @generated from protobuf field: repeated string enum = 2;
     */
    enum: string[];
}
/**
 * @generated from protobuf message objective_ai.ArrayJsonSchema
 */
export interface ArrayJsonSchema {
    /**
     * @generated from protobuf field: google.protobuf.StringValue description = 1;
     */
    description?: StringValue; // optional
    /**
     * @generated from protobuf field: objective_ai.JsonSchema items = 2;
     */
    items?: JsonSchema;
}
/**
 * @generated from protobuf message objective_ai.ObjectJsonSchema
 */
export interface ObjectJsonSchema {
    /**
     * @generated from protobuf field: google.protobuf.StringValue description = 1;
     */
    description?: StringValue; // optional
    /**
     * @generated from protobuf field: repeated objective_ai.ObjectJsonSchemaProperty properties = 2;
     */
    properties: ObjectJsonSchemaProperty[];
}
/**
 * @generated from protobuf message objective_ai.ObjectJsonSchemaProperty
 */
export interface ObjectJsonSchemaProperty {
    /**
     * @generated from protobuf field: string key = 1;
     */
    key: string;
    /**
     * @generated from protobuf field: objective_ai.JsonSchema value = 2;
     */
    value?: JsonSchema; // required
}
/**
 * @generated from protobuf enum objective_ai.QueryChoiceVoteKind
 */
export enum QueryChoiceVoteKind {
    /**
     * @generated from protobuf enum value: GENERATE = 0;
     */
    GENERATE = 0,
    /**
     * @generated from protobuf enum value: SELECT = 1;
     */
    SELECT = 1
}
/**
 * @generated from protobuf enum objective_ai.Role
 */
export enum Role {
    /**
     * @generated from protobuf enum value: USER = 0;
     */
    USER = 0,
    /**
     * @generated from protobuf enum value: ASSISTANT = 1;
     */
    ASSISTANT = 1,
    /**
     * @generated from protobuf enum value: SYSTEM = 2;
     */
    SYSTEM = 2,
    /**
     * @generated from protobuf enum value: TOOL = 3;
     */
    TOOL = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class QueryRequest$Type extends MessageType<QueryRequest> {
    constructor() {
        super("objective_ai.QueryRequest", [
            { no: 1, name: "messages", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Message },
            { no: 2, name: "meta_model", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "response_format", kind: "message", T: () => JsonSchema },
            { no: 4, name: "stop", kind: "message", T: () => Stop },
            { no: 5, name: "max_tokens", kind: "message", T: () => UInt64Value },
            { no: 6, name: "tools", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Tool }
        ]);
    }
    create(value?: PartialMessage<QueryRequest>): QueryRequest {
        const message = { messages: [], metaModel: "", tools: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryRequest): QueryRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated objective_ai.Message messages */ 1:
                    message.messages.push(Message.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string meta_model */ 2:
                    message.metaModel = reader.string();
                    break;
                case /* objective_ai.JsonSchema response_format */ 3:
                    message.responseFormat = JsonSchema.internalBinaryRead(reader, reader.uint32(), options, message.responseFormat);
                    break;
                case /* objective_ai.Stop stop */ 4:
                    message.stop = Stop.internalBinaryRead(reader, reader.uint32(), options, message.stop);
                    break;
                case /* google.protobuf.UInt64Value max_tokens */ 5:
                    message.maxTokens = UInt64Value.internalBinaryRead(reader, reader.uint32(), options, message.maxTokens);
                    break;
                case /* repeated objective_ai.Tool tools */ 6:
                    message.tools.push(Tool.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated objective_ai.Message messages = 1; */
        for (let i = 0; i < message.messages.length; i++)
            Message.internalBinaryWrite(message.messages[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string meta_model = 2; */
        if (message.metaModel !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.metaModel);
        /* objective_ai.JsonSchema response_format = 3; */
        if (message.responseFormat)
            JsonSchema.internalBinaryWrite(message.responseFormat, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* objective_ai.Stop stop = 4; */
        if (message.stop)
            Stop.internalBinaryWrite(message.stop, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.UInt64Value max_tokens = 5; */
        if (message.maxTokens)
            UInt64Value.internalBinaryWrite(message.maxTokens, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated objective_ai.Tool tools = 6; */
        for (let i = 0; i < message.tools.length; i++)
            Tool.internalBinaryWrite(message.tools[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message objective_ai.QueryRequest
 */
export const QueryRequest = new QueryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryResponse$Type extends MessageType<QueryResponse> {
    constructor() {
        super("objective_ai.QueryResponse", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "meta_model", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "choices", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => QueryChoice }
        ]);
    }
    create(value?: PartialMessage<QueryResponse>): QueryResponse {
        const message = { id: "", metaModel: "", choices: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryResponse): QueryResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string meta_model */ 2:
                    message.metaModel = reader.string();
                    break;
                case /* repeated objective_ai.QueryChoice choices */ 3:
                    message.choices.push(QueryChoice.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string meta_model = 2; */
        if (message.metaModel !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.metaModel);
        /* repeated objective_ai.QueryChoice choices = 3; */
        for (let i = 0; i < message.choices.length; i++)
            QueryChoice.internalBinaryWrite(message.choices[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message objective_ai.QueryResponse
 */
export const QueryResponse = new QueryResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryStreamingResponse$Type extends MessageType<QueryStreamingResponse> {
    constructor() {
        super("objective_ai.QueryStreamingResponse", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "meta_model", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "choice", kind: "message", oneof: "kind", T: () => QueryChoice },
            { no: 4, name: "vote", kind: "message", oneof: "kind", T: () => QueryChoiceVote },
            { no: 5, name: "choice_confidence", kind: "message", oneof: "kind", T: () => QueryStreamingChoiceConfidence }
        ]);
    }
    create(value?: PartialMessage<QueryStreamingResponse>): QueryStreamingResponse {
        const message = { id: "", metaModel: "", kind: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryStreamingResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryStreamingResponse): QueryStreamingResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string meta_model */ 2:
                    message.metaModel = reader.string();
                    break;
                case /* objective_ai.QueryChoice choice */ 3:
                    message.kind = {
                        oneofKind: "choice",
                        choice: QueryChoice.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).choice)
                    };
                    break;
                case /* objective_ai.QueryChoiceVote vote */ 4:
                    message.kind = {
                        oneofKind: "vote",
                        vote: QueryChoiceVote.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).vote)
                    };
                    break;
                case /* objective_ai.QueryStreamingChoiceConfidence choice_confidence */ 5:
                    message.kind = {
                        oneofKind: "choiceConfidence",
                        choiceConfidence: QueryStreamingChoiceConfidence.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).choiceConfidence)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryStreamingResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string meta_model = 2; */
        if (message.metaModel !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.metaModel);
        /* objective_ai.QueryChoice choice = 3; */
        if (message.kind.oneofKind === "choice")
            QueryChoice.internalBinaryWrite(message.kind.choice, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* objective_ai.QueryChoiceVote vote = 4; */
        if (message.kind.oneofKind === "vote")
            QueryChoiceVote.internalBinaryWrite(message.kind.vote, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* objective_ai.QueryStreamingChoiceConfidence choice_confidence = 5; */
        if (message.kind.oneofKind === "choiceConfidence")
            QueryStreamingChoiceConfidence.internalBinaryWrite(message.kind.choiceConfidence, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message objective_ai.QueryStreamingResponse
 */
export const QueryStreamingResponse = new QueryStreamingResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryStreamingChoiceConfidence$Type extends MessageType<QueryStreamingChoiceConfidence> {
    constructor() {
        super("objective_ai.QueryStreamingChoiceConfidence", [
            { no: 1, name: "confidence", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ } }
        ]);
    }
    create(value?: PartialMessage<QueryStreamingChoiceConfidence>): QueryStreamingChoiceConfidence {
        const message = { confidence: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryStreamingChoiceConfidence>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryStreamingChoiceConfidence): QueryStreamingChoiceConfidence {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, double> confidence */ 1:
                    this.binaryReadMap1(message.confidence, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: QueryStreamingChoiceConfidence["confidence"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof QueryStreamingChoiceConfidence["confidence"] | undefined, val: QueryStreamingChoiceConfidence["confidence"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.double();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field objective_ai.QueryStreamingChoiceConfidence.confidence");
            }
        }
        map[key ?? ""] = val ?? 0;
    }
    internalBinaryWrite(message: QueryStreamingChoiceConfidence, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, double> confidence = 1; */
        for (let k of Object.keys(message.confidence))
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.Bit64).double(message.confidence[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message objective_ai.QueryStreamingChoiceConfidence
 */
export const QueryStreamingChoiceConfidence = new QueryStreamingChoiceConfidence$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryChoice$Type extends MessageType<QueryChoice> {
    constructor() {
        super("objective_ai.QueryChoice", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "message", kind: "message", T: () => QueryMessage },
            { no: 3, name: "votes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => QueryChoiceVote },
            { no: 4, name: "confidence", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<QueryChoice>): QueryChoice {
        const message = { id: "", votes: [], confidence: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryChoice>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryChoice): QueryChoice {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* objective_ai.QueryMessage message */ 2:
                    message.message = QueryMessage.internalBinaryRead(reader, reader.uint32(), options, message.message);
                    break;
                case /* repeated objective_ai.QueryChoiceVote votes */ 3:
                    message.votes.push(QueryChoiceVote.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* double confidence */ 4:
                    message.confidence = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryChoice, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* objective_ai.QueryMessage message = 2; */
        if (message.message)
            QueryMessage.internalBinaryWrite(message.message, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated objective_ai.QueryChoiceVote votes = 3; */
        for (let i = 0; i < message.votes.length; i++)
            QueryChoiceVote.internalBinaryWrite(message.votes[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* double confidence = 4; */
        if (message.confidence !== 0)
            writer.tag(4, WireType.Bit64).double(message.confidence);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message objective_ai.QueryChoice
 */
export const QueryChoice = new QueryChoice$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryChoiceVote$Type extends MessageType<QueryChoiceVote> {
    constructor() {
        super("objective_ai.QueryChoiceVote", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "model", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "temperature", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "top_p", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "provider", kind: "message", T: () => StringValue },
            { no: 6, name: "kind", kind: "enum", T: () => ["objective_ai.QueryChoiceVoteKind", QueryChoiceVoteKind] },
            { no: 7, name: "reasoning", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "finish_reason", kind: "message", T: () => StringValue },
            { no: 9, name: "usage", kind: "message", T: () => Usage }
        ]);
    }
    create(value?: PartialMessage<QueryChoiceVote>): QueryChoiceVote {
        const message = { id: "", model: "", temperature: 0, topP: 0, kind: 0, reasoning: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryChoiceVote>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryChoiceVote): QueryChoiceVote {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string model */ 2:
                    message.model = reader.string();
                    break;
                case /* double temperature */ 3:
                    message.temperature = reader.double();
                    break;
                case /* double top_p */ 4:
                    message.topP = reader.double();
                    break;
                case /* google.protobuf.StringValue provider */ 5:
                    message.provider = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.provider);
                    break;
                case /* objective_ai.QueryChoiceVoteKind kind */ 6:
                    message.kind = reader.int32();
                    break;
                case /* string reasoning */ 7:
                    message.reasoning = reader.string();
                    break;
                case /* google.protobuf.StringValue finish_reason */ 8:
                    message.finishReason = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.finishReason);
                    break;
                case /* objective_ai.Usage usage */ 9:
                    message.usage = Usage.internalBinaryRead(reader, reader.uint32(), options, message.usage);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryChoiceVote, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string model = 2; */
        if (message.model !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.model);
        /* double temperature = 3; */
        if (message.temperature !== 0)
            writer.tag(3, WireType.Bit64).double(message.temperature);
        /* double top_p = 4; */
        if (message.topP !== 0)
            writer.tag(4, WireType.Bit64).double(message.topP);
        /* google.protobuf.StringValue provider = 5; */
        if (message.provider)
            StringValue.internalBinaryWrite(message.provider, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* objective_ai.QueryChoiceVoteKind kind = 6; */
        if (message.kind !== 0)
            writer.tag(6, WireType.Varint).int32(message.kind);
        /* string reasoning = 7; */
        if (message.reasoning !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.reasoning);
        /* google.protobuf.StringValue finish_reason = 8; */
        if (message.finishReason)
            StringValue.internalBinaryWrite(message.finishReason, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* objective_ai.Usage usage = 9; */
        if (message.usage)
            Usage.internalBinaryWrite(message.usage, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message objective_ai.QueryChoiceVote
 */
export const QueryChoiceVote = new QueryChoiceVote$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryMessage$Type extends MessageType<QueryMessage> {
    constructor() {
        super("objective_ai.QueryMessage", [
            { no: 1, name: "role", kind: "enum", T: () => ["objective_ai.Role", Role] },
            { no: 2, name: "content", kind: "message", T: () => Value }
        ]);
    }
    create(value?: PartialMessage<QueryMessage>): QueryMessage {
        const message = { role: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryMessage): QueryMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* objective_ai.Role role */ 1:
                    message.role = reader.int32();
                    break;
                case /* google.protobuf.Value content */ 2:
                    message.content = Value.internalBinaryRead(reader, reader.uint32(), options, message.content);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* objective_ai.Role role = 1; */
        if (message.role !== 0)
            writer.tag(1, WireType.Varint).int32(message.role);
        /* google.protobuf.Value content = 2; */
        if (message.content)
            Value.internalBinaryWrite(message.content, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message objective_ai.QueryMessage
 */
export const QueryMessage = new QueryMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Usage$Type extends MessageType<Usage> {
    constructor() {
        super("objective_ai.Usage", [
            { no: 1, name: "prompt_tokens", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "completion_tokens", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<Usage>): Usage {
        const message = { promptTokens: 0, completionTokens: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Usage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Usage): Usage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 prompt_tokens */ 1:
                    message.promptTokens = reader.uint64().toNumber();
                    break;
                case /* uint64 completion_tokens */ 2:
                    message.completionTokens = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Usage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 prompt_tokens = 1; */
        if (message.promptTokens !== 0)
            writer.tag(1, WireType.Varint).uint64(message.promptTokens);
        /* uint64 completion_tokens = 2; */
        if (message.completionTokens !== 0)
            writer.tag(2, WireType.Varint).uint64(message.completionTokens);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message objective_ai.Usage
 */
export const Usage = new Usage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Message$Type extends MessageType<Message> {
    constructor() {
        super("objective_ai.Message", [
            { no: 1, name: "user", kind: "message", oneof: "kind", T: () => UserMessage },
            { no: 2, name: "assistant", kind: "message", oneof: "kind", T: () => AssistantMessage },
            { no: 3, name: "system", kind: "message", oneof: "kind", T: () => SystemMessage },
            { no: 4, name: "tool", kind: "message", oneof: "kind", T: () => ToolMessage }
        ]);
    }
    create(value?: PartialMessage<Message>): Message {
        const message = { kind: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Message>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Message): Message {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* objective_ai.UserMessage user */ 1:
                    message.kind = {
                        oneofKind: "user",
                        user: UserMessage.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).user)
                    };
                    break;
                case /* objective_ai.AssistantMessage assistant */ 2:
                    message.kind = {
                        oneofKind: "assistant",
                        assistant: AssistantMessage.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).assistant)
                    };
                    break;
                case /* objective_ai.SystemMessage system */ 3:
                    message.kind = {
                        oneofKind: "system",
                        system: SystemMessage.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).system)
                    };
                    break;
                case /* objective_ai.ToolMessage tool */ 4:
                    message.kind = {
                        oneofKind: "tool",
                        tool: ToolMessage.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).tool)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Message, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* objective_ai.UserMessage user = 1; */
        if (message.kind.oneofKind === "user")
            UserMessage.internalBinaryWrite(message.kind.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* objective_ai.AssistantMessage assistant = 2; */
        if (message.kind.oneofKind === "assistant")
            AssistantMessage.internalBinaryWrite(message.kind.assistant, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* objective_ai.SystemMessage system = 3; */
        if (message.kind.oneofKind === "system")
            SystemMessage.internalBinaryWrite(message.kind.system, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* objective_ai.ToolMessage tool = 4; */
        if (message.kind.oneofKind === "tool")
            ToolMessage.internalBinaryWrite(message.kind.tool, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message objective_ai.Message
 */
export const Message = new Message$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AssistantMessage$Type extends MessageType<AssistantMessage> {
    constructor() {
        super("objective_ai.AssistantMessage", [
            { no: 1, name: "content", kind: "message", T: () => MessageContent },
            { no: 2, name: "tool_calls", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ToolCall }
        ]);
    }
    create(value?: PartialMessage<AssistantMessage>): AssistantMessage {
        const message = { toolCalls: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AssistantMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AssistantMessage): AssistantMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* objective_ai.MessageContent content */ 1:
                    message.content = MessageContent.internalBinaryRead(reader, reader.uint32(), options, message.content);
                    break;
                case /* repeated objective_ai.ToolCall tool_calls */ 2:
                    message.toolCalls.push(ToolCall.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AssistantMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* objective_ai.MessageContent content = 1; */
        if (message.content)
            MessageContent.internalBinaryWrite(message.content, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated objective_ai.ToolCall tool_calls = 2; */
        for (let i = 0; i < message.toolCalls.length; i++)
            ToolCall.internalBinaryWrite(message.toolCalls[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message objective_ai.AssistantMessage
 */
export const AssistantMessage = new AssistantMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ToolMessage$Type extends MessageType<ToolMessage> {
    constructor() {
        super("objective_ai.ToolMessage", [
            { no: 1, name: "content", kind: "message", T: () => MessageContent },
            { no: 2, name: "tool_call_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ToolMessage>): ToolMessage {
        const message = { toolCallId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ToolMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ToolMessage): ToolMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* objective_ai.MessageContent content */ 1:
                    message.content = MessageContent.internalBinaryRead(reader, reader.uint32(), options, message.content);
                    break;
                case /* string tool_call_id */ 2:
                    message.toolCallId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ToolMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* objective_ai.MessageContent content = 1; */
        if (message.content)
            MessageContent.internalBinaryWrite(message.content, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string tool_call_id = 2; */
        if (message.toolCallId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.toolCallId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message objective_ai.ToolMessage
 */
export const ToolMessage = new ToolMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserMessage$Type extends MessageType<UserMessage> {
    constructor() {
        super("objective_ai.UserMessage", [
            { no: 1, name: "content", kind: "message", T: () => MessageContent }
        ]);
    }
    create(value?: PartialMessage<UserMessage>): UserMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UserMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserMessage): UserMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* objective_ai.MessageContent content */ 1:
                    message.content = MessageContent.internalBinaryRead(reader, reader.uint32(), options, message.content);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* objective_ai.MessageContent content = 1; */
        if (message.content)
            MessageContent.internalBinaryWrite(message.content, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message objective_ai.UserMessage
 */
export const UserMessage = new UserMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SystemMessage$Type extends MessageType<SystemMessage> {
    constructor() {
        super("objective_ai.SystemMessage", [
            { no: 1, name: "content", kind: "message", T: () => MessageContent }
        ]);
    }
    create(value?: PartialMessage<SystemMessage>): SystemMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SystemMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SystemMessage): SystemMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* objective_ai.MessageContent content */ 1:
                    message.content = MessageContent.internalBinaryRead(reader, reader.uint32(), options, message.content);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SystemMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* objective_ai.MessageContent content = 1; */
        if (message.content)
            MessageContent.internalBinaryWrite(message.content, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message objective_ai.SystemMessage
 */
export const SystemMessage = new SystemMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Stop$Type extends MessageType<Stop> {
    constructor() {
        super("objective_ai.Stop", [
            { no: 1, name: "text", kind: "scalar", oneof: "kind", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "texts", kind: "message", oneof: "kind", T: () => RepeatedText }
        ]);
    }
    create(value?: PartialMessage<Stop>): Stop {
        const message = { kind: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Stop>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Stop): Stop {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.kind = {
                        oneofKind: "text",
                        text: reader.string()
                    };
                    break;
                case /* objective_ai.RepeatedText texts */ 2:
                    message.kind = {
                        oneofKind: "texts",
                        texts: RepeatedText.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).texts)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Stop, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.kind.oneofKind === "text")
            writer.tag(1, WireType.LengthDelimited).string(message.kind.text);
        /* objective_ai.RepeatedText texts = 2; */
        if (message.kind.oneofKind === "texts")
            RepeatedText.internalBinaryWrite(message.kind.texts, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message objective_ai.Stop
 */
export const Stop = new Stop$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RepeatedText$Type extends MessageType<RepeatedText> {
    constructor() {
        super("objective_ai.RepeatedText", [
            { no: 1, name: "texts", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RepeatedText>): RepeatedText {
        const message = { texts: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RepeatedText>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RepeatedText): RepeatedText {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string texts */ 1:
                    message.texts.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RepeatedText, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string texts = 1; */
        for (let i = 0; i < message.texts.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.texts[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message objective_ai.RepeatedText
 */
export const RepeatedText = new RepeatedText$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MessageContent$Type extends MessageType<MessageContent> {
    constructor() {
        super("objective_ai.MessageContent", [
            { no: 1, name: "text", kind: "scalar", oneof: "kind", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "parts", kind: "message", oneof: "kind", T: () => ContentParts }
        ]);
    }
    create(value?: PartialMessage<MessageContent>): MessageContent {
        const message = { kind: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MessageContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MessageContent): MessageContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.kind = {
                        oneofKind: "text",
                        text: reader.string()
                    };
                    break;
                case /* objective_ai.ContentParts parts */ 2:
                    message.kind = {
                        oneofKind: "parts",
                        parts: ContentParts.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).parts)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MessageContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.kind.oneofKind === "text")
            writer.tag(1, WireType.LengthDelimited).string(message.kind.text);
        /* objective_ai.ContentParts parts = 2; */
        if (message.kind.oneofKind === "parts")
            ContentParts.internalBinaryWrite(message.kind.parts, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message objective_ai.MessageContent
 */
export const MessageContent = new MessageContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ToolCall$Type extends MessageType<ToolCall> {
    constructor() {
        super("objective_ai.ToolCall", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "function", kind: "message", oneof: "kind", T: () => FunctionToolCall }
        ]);
    }
    create(value?: PartialMessage<ToolCall>): ToolCall {
        const message = { id: "", kind: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ToolCall>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ToolCall): ToolCall {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* objective_ai.FunctionToolCall function */ 2:
                    message.kind = {
                        oneofKind: "function",
                        function: FunctionToolCall.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).function)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ToolCall, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* objective_ai.FunctionToolCall function = 2; */
        if (message.kind.oneofKind === "function")
            FunctionToolCall.internalBinaryWrite(message.kind.function, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message objective_ai.ToolCall
 */
export const ToolCall = new ToolCall$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FunctionToolCall$Type extends MessageType<FunctionToolCall> {
    constructor() {
        super("objective_ai.FunctionToolCall", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "arguments", kind: "message", T: () => Value }
        ]);
    }
    create(value?: PartialMessage<FunctionToolCall>): FunctionToolCall {
        const message = { name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FunctionToolCall>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FunctionToolCall): FunctionToolCall {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* google.protobuf.Value arguments */ 2:
                    message.arguments = Value.internalBinaryRead(reader, reader.uint32(), options, message.arguments);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FunctionToolCall, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* google.protobuf.Value arguments = 2; */
        if (message.arguments)
            Value.internalBinaryWrite(message.arguments, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message objective_ai.FunctionToolCall
 */
export const FunctionToolCall = new FunctionToolCall$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContentParts$Type extends MessageType<ContentParts> {
    constructor() {
        super("objective_ai.ContentParts", [
            { no: 1, name: "parts", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ContentPart }
        ]);
    }
    create(value?: PartialMessage<ContentParts>): ContentParts {
        const message = { parts: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ContentParts>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContentParts): ContentParts {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated objective_ai.ContentPart parts */ 1:
                    message.parts.push(ContentPart.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContentParts, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated objective_ai.ContentPart parts = 1; */
        for (let i = 0; i < message.parts.length; i++)
            ContentPart.internalBinaryWrite(message.parts[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message objective_ai.ContentParts
 */
export const ContentParts = new ContentParts$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContentPart$Type extends MessageType<ContentPart> {
    constructor() {
        super("objective_ai.ContentPart", [
            { no: 1, name: "text", kind: "scalar", oneof: "kind", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "image_url", kind: "message", oneof: "kind", T: () => ImageUrl }
        ]);
    }
    create(value?: PartialMessage<ContentPart>): ContentPart {
        const message = { kind: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ContentPart>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContentPart): ContentPart {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.kind = {
                        oneofKind: "text",
                        text: reader.string()
                    };
                    break;
                case /* objective_ai.ImageUrl image_url */ 2:
                    message.kind = {
                        oneofKind: "imageUrl",
                        imageUrl: ImageUrl.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).imageUrl)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContentPart, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.kind.oneofKind === "text")
            writer.tag(1, WireType.LengthDelimited).string(message.kind.text);
        /* objective_ai.ImageUrl image_url = 2; */
        if (message.kind.oneofKind === "imageUrl")
            ImageUrl.internalBinaryWrite(message.kind.imageUrl, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message objective_ai.ContentPart
 */
export const ContentPart = new ContentPart$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ImageUrl$Type extends MessageType<ImageUrl> {
    constructor() {
        super("objective_ai.ImageUrl", [
            { no: 1, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "detail", kind: "message", T: () => StringValue }
        ]);
    }
    create(value?: PartialMessage<ImageUrl>): ImageUrl {
        const message = { url: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ImageUrl>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ImageUrl): ImageUrl {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string url */ 1:
                    message.url = reader.string();
                    break;
                case /* google.protobuf.StringValue detail */ 2:
                    message.detail = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.detail);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ImageUrl, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string url = 1; */
        if (message.url !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.url);
        /* google.protobuf.StringValue detail = 2; */
        if (message.detail)
            StringValue.internalBinaryWrite(message.detail, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message objective_ai.ImageUrl
 */
export const ImageUrl = new ImageUrl$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Tool$Type extends MessageType<Tool> {
    constructor() {
        super("objective_ai.Tool", [
            { no: 1, name: "function", kind: "message", oneof: "kind", T: () => FunctionTool }
        ]);
    }
    create(value?: PartialMessage<Tool>): Tool {
        const message = { kind: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Tool>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Tool): Tool {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* objective_ai.FunctionTool function */ 1:
                    message.kind = {
                        oneofKind: "function",
                        function: FunctionTool.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).function)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Tool, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* objective_ai.FunctionTool function = 1; */
        if (message.kind.oneofKind === "function")
            FunctionTool.internalBinaryWrite(message.kind.function, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message objective_ai.Tool
 */
export const Tool = new Tool$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FunctionTool$Type extends MessageType<FunctionTool> {
    constructor() {
        super("objective_ai.FunctionTool", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "description", kind: "message", T: () => StringValue },
            { no: 3, name: "parameters", kind: "message", T: () => Value }
        ]);
    }
    create(value?: PartialMessage<FunctionTool>): FunctionTool {
        const message = { name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FunctionTool>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FunctionTool): FunctionTool {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* google.protobuf.StringValue description */ 2:
                    message.description = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.description);
                    break;
                case /* google.protobuf.Value parameters */ 3:
                    message.parameters = Value.internalBinaryRead(reader, reader.uint32(), options, message.parameters);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FunctionTool, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* google.protobuf.StringValue description = 2; */
        if (message.description)
            StringValue.internalBinaryWrite(message.description, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Value parameters = 3; */
        if (message.parameters)
            Value.internalBinaryWrite(message.parameters, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message objective_ai.FunctionTool
 */
export const FunctionTool = new FunctionTool$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JsonSchema$Type extends MessageType<JsonSchema> {
    constructor() {
        super("objective_ai.JsonSchema", [
            { no: 1, name: "boolean", kind: "message", oneof: "kind", T: () => BooleanJsonSchema },
            { no: 2, name: "number", kind: "message", oneof: "kind", T: () => NumberJsonSchema },
            { no: 3, name: "integer", kind: "message", oneof: "kind", T: () => IntegerJsonSchema },
            { no: 4, name: "string", kind: "message", oneof: "kind", T: () => StringJsonSchema },
            { no: 5, name: "array", kind: "message", oneof: "kind", T: () => ArrayJsonSchema },
            { no: 6, name: "object", kind: "message", oneof: "kind", T: () => ObjectJsonSchema }
        ]);
    }
    create(value?: PartialMessage<JsonSchema>): JsonSchema {
        const message = { kind: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<JsonSchema>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JsonSchema): JsonSchema {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* objective_ai.BooleanJsonSchema boolean */ 1:
                    message.kind = {
                        oneofKind: "boolean",
                        boolean: BooleanJsonSchema.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).boolean)
                    };
                    break;
                case /* objective_ai.NumberJsonSchema number */ 2:
                    message.kind = {
                        oneofKind: "number",
                        number: NumberJsonSchema.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).number)
                    };
                    break;
                case /* objective_ai.IntegerJsonSchema integer */ 3:
                    message.kind = {
                        oneofKind: "integer",
                        integer: IntegerJsonSchema.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).integer)
                    };
                    break;
                case /* objective_ai.StringJsonSchema string */ 4:
                    message.kind = {
                        oneofKind: "string",
                        string: StringJsonSchema.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).string)
                    };
                    break;
                case /* objective_ai.ArrayJsonSchema array */ 5:
                    message.kind = {
                        oneofKind: "array",
                        array: ArrayJsonSchema.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).array)
                    };
                    break;
                case /* objective_ai.ObjectJsonSchema object */ 6:
                    message.kind = {
                        oneofKind: "object",
                        object: ObjectJsonSchema.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).object)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JsonSchema, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* objective_ai.BooleanJsonSchema boolean = 1; */
        if (message.kind.oneofKind === "boolean")
            BooleanJsonSchema.internalBinaryWrite(message.kind.boolean, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* objective_ai.NumberJsonSchema number = 2; */
        if (message.kind.oneofKind === "number")
            NumberJsonSchema.internalBinaryWrite(message.kind.number, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* objective_ai.IntegerJsonSchema integer = 3; */
        if (message.kind.oneofKind === "integer")
            IntegerJsonSchema.internalBinaryWrite(message.kind.integer, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* objective_ai.StringJsonSchema string = 4; */
        if (message.kind.oneofKind === "string")
            StringJsonSchema.internalBinaryWrite(message.kind.string, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* objective_ai.ArrayJsonSchema array = 5; */
        if (message.kind.oneofKind === "array")
            ArrayJsonSchema.internalBinaryWrite(message.kind.array, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* objective_ai.ObjectJsonSchema object = 6; */
        if (message.kind.oneofKind === "object")
            ObjectJsonSchema.internalBinaryWrite(message.kind.object, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message objective_ai.JsonSchema
 */
export const JsonSchema = new JsonSchema$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BooleanJsonSchema$Type extends MessageType<BooleanJsonSchema> {
    constructor() {
        super("objective_ai.BooleanJsonSchema", [
            { no: 1, name: "description", kind: "message", T: () => StringValue }
        ]);
    }
    create(value?: PartialMessage<BooleanJsonSchema>): BooleanJsonSchema {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BooleanJsonSchema>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BooleanJsonSchema): BooleanJsonSchema {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.StringValue description */ 1:
                    message.description = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.description);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BooleanJsonSchema, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.StringValue description = 1; */
        if (message.description)
            StringValue.internalBinaryWrite(message.description, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message objective_ai.BooleanJsonSchema
 */
export const BooleanJsonSchema = new BooleanJsonSchema$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NumberJsonSchema$Type extends MessageType<NumberJsonSchema> {
    constructor() {
        super("objective_ai.NumberJsonSchema", [
            { no: 1, name: "description", kind: "message", T: () => StringValue }
        ]);
    }
    create(value?: PartialMessage<NumberJsonSchema>): NumberJsonSchema {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NumberJsonSchema>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NumberJsonSchema): NumberJsonSchema {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.StringValue description */ 1:
                    message.description = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.description);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NumberJsonSchema, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.StringValue description = 1; */
        if (message.description)
            StringValue.internalBinaryWrite(message.description, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message objective_ai.NumberJsonSchema
 */
export const NumberJsonSchema = new NumberJsonSchema$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IntegerJsonSchema$Type extends MessageType<IntegerJsonSchema> {
    constructor() {
        super("objective_ai.IntegerJsonSchema", [
            { no: 1, name: "description", kind: "message", T: () => StringValue }
        ]);
    }
    create(value?: PartialMessage<IntegerJsonSchema>): IntegerJsonSchema {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IntegerJsonSchema>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IntegerJsonSchema): IntegerJsonSchema {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.StringValue description */ 1:
                    message.description = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.description);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IntegerJsonSchema, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.StringValue description = 1; */
        if (message.description)
            StringValue.internalBinaryWrite(message.description, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message objective_ai.IntegerJsonSchema
 */
export const IntegerJsonSchema = new IntegerJsonSchema$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StringJsonSchema$Type extends MessageType<StringJsonSchema> {
    constructor() {
        super("objective_ai.StringJsonSchema", [
            { no: 1, name: "description", kind: "message", T: () => StringValue },
            { no: 2, name: "enum", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StringJsonSchema>): StringJsonSchema {
        const message = { enum: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StringJsonSchema>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StringJsonSchema): StringJsonSchema {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.StringValue description */ 1:
                    message.description = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.description);
                    break;
                case /* repeated string enum */ 2:
                    message.enum.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StringJsonSchema, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.StringValue description = 1; */
        if (message.description)
            StringValue.internalBinaryWrite(message.description, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated string enum = 2; */
        for (let i = 0; i < message.enum.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.enum[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message objective_ai.StringJsonSchema
 */
export const StringJsonSchema = new StringJsonSchema$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ArrayJsonSchema$Type extends MessageType<ArrayJsonSchema> {
    constructor() {
        super("objective_ai.ArrayJsonSchema", [
            { no: 1, name: "description", kind: "message", T: () => StringValue },
            { no: 2, name: "items", kind: "message", T: () => JsonSchema }
        ]);
    }
    create(value?: PartialMessage<ArrayJsonSchema>): ArrayJsonSchema {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ArrayJsonSchema>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ArrayJsonSchema): ArrayJsonSchema {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.StringValue description */ 1:
                    message.description = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.description);
                    break;
                case /* objective_ai.JsonSchema items */ 2:
                    message.items = JsonSchema.internalBinaryRead(reader, reader.uint32(), options, message.items);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ArrayJsonSchema, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.StringValue description = 1; */
        if (message.description)
            StringValue.internalBinaryWrite(message.description, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* objective_ai.JsonSchema items = 2; */
        if (message.items)
            JsonSchema.internalBinaryWrite(message.items, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message objective_ai.ArrayJsonSchema
 */
export const ArrayJsonSchema = new ArrayJsonSchema$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ObjectJsonSchema$Type extends MessageType<ObjectJsonSchema> {
    constructor() {
        super("objective_ai.ObjectJsonSchema", [
            { no: 1, name: "description", kind: "message", T: () => StringValue },
            { no: 2, name: "properties", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ObjectJsonSchemaProperty }
        ]);
    }
    create(value?: PartialMessage<ObjectJsonSchema>): ObjectJsonSchema {
        const message = { properties: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ObjectJsonSchema>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ObjectJsonSchema): ObjectJsonSchema {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.StringValue description */ 1:
                    message.description = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.description);
                    break;
                case /* repeated objective_ai.ObjectJsonSchemaProperty properties */ 2:
                    message.properties.push(ObjectJsonSchemaProperty.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ObjectJsonSchema, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.StringValue description = 1; */
        if (message.description)
            StringValue.internalBinaryWrite(message.description, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated objective_ai.ObjectJsonSchemaProperty properties = 2; */
        for (let i = 0; i < message.properties.length; i++)
            ObjectJsonSchemaProperty.internalBinaryWrite(message.properties[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message objective_ai.ObjectJsonSchema
 */
export const ObjectJsonSchema = new ObjectJsonSchema$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ObjectJsonSchemaProperty$Type extends MessageType<ObjectJsonSchemaProperty> {
    constructor() {
        super("objective_ai.ObjectJsonSchemaProperty", [
            { no: 1, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value", kind: "message", T: () => JsonSchema }
        ]);
    }
    create(value?: PartialMessage<ObjectJsonSchemaProperty>): ObjectJsonSchemaProperty {
        const message = { key: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ObjectJsonSchemaProperty>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ObjectJsonSchemaProperty): ObjectJsonSchemaProperty {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key */ 1:
                    message.key = reader.string();
                    break;
                case /* objective_ai.JsonSchema value */ 2:
                    message.value = JsonSchema.internalBinaryRead(reader, reader.uint32(), options, message.value);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ObjectJsonSchemaProperty, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string key = 1; */
        if (message.key !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.key);
        /* objective_ai.JsonSchema value = 2; */
        if (message.value)
            JsonSchema.internalBinaryWrite(message.value, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message objective_ai.ObjectJsonSchemaProperty
 */
export const ObjectJsonSchemaProperty = new ObjectJsonSchemaProperty$Type();
/**
 * @generated ServiceType for protobuf service objective_ai.ObjectiveAI
 */
export const ObjectiveAI = new ServiceType("objective_ai.ObjectiveAI", [
    { name: "Query", options: {}, I: QueryRequest, O: QueryResponse },
    { name: "QueryStreaming", serverStreaming: true, options: {}, I: QueryRequest, O: QueryStreamingResponse }
]);
